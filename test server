"""
Author: Yonathan Chapal
Program name: Exc 2.7
Description: A basic commands server
Date: 10/11/2023
"""
import base64
import socket
import logging
import glob
import os
import shutil
import subprocess
from PIL import ImageGrab

# define network constants
LISTEN_IP = '0.0.0.0'
LISTEN_PORT = 17207
Q_LEN = 1
MAX_PACKET = 1024
EXCEPTED_REQUEST_TYPE = 'str'
NO_PATH_ERROR = "no files found at path specified"

# define log constants
LOG_FORMAT = '%(levelname)s | %(asctime)s | %(processName)s | %(message)s'
LOG_LEVEL = logging.DEBUG
LOG_DIR = 'log'
LOG_FILE = LOG_DIR + '/loggerServer.log'


def get_file_list(path):
    """
    Get the list of files in the specified directory.

    :param path: The path of the directory.
    :type path: str

    :return: A list of file paths in the directory.
    :rtype: list
    """
    # Ensure the path is in a valid format for glob search
    path = path.replace("/", "\\")
    files = glob.glob(rf"{path}/*.*", recursive=False)

    # Change format back to /
    files = list(map(lambda x: x.replace("\\", "/"), files))

    # Set the return value and log warning if no files were found
    str1 = str(files) if len(files) > 0 else logging.warning(f"no files found at path: '{path}'") or NO_PATH_ERROR
    return str1


def delete_file(path):
    """
    Delete a file at the specified path.

    :param path: The path of the file to be deleted.
    :type path: str

    :return: 0 if successful, error code otherwise.
    :rtype: int
    """
    return_code = 0
    # Ensure the path is using only /
    path = path.replace("\\", "/")
    try:
        os.remove(path)
        # Signal removal as successful
    except OSError as err:
        logging.error(f"error while trying to delete file at {path}: {err}")
        # Return error code
        return_code = err.args[0]

    return return_code


def copy_file(src, dest):
    """
    Copy a file from source to destination.

    :param src: The source path of the file.
    :type src: str

    :param dest: The destination path for the copied file.
    :type dest: str

    :return: 0 if successful, error code otherwise.
    :rtype: int
    """
    return_code = 0
    # Ensure the paths are using only /
    src = src.replace("\\", "/")
    dest = dest.replace("\\", "/")
    try:
        shutil.copy(src, dest)
        # Signal copy as successful
    except OSError as err:
        logging.error(f"error while trying to copy file from {src} to {dest}: {err}")
        # Return error code
        return_code = err.args[0]

    return return_code


def execute_program(path):
    """
    Execute a program at the specified path.

    :param path: The path of the program to be executed.
    :type path: str

    :return: 0 if successful, error code otherwise.
    :rtype: int
    """
    return_code = 0
    # Ensure the path is using only /
    path = path.replace("\\", "/")
    try:
        subprocess.call(path)
    except OSError as err:
        logging.error(f"os error while trying to execute program at {path}: {err}")
        return_code = err.args[0]
    except subprocess.CalledProcessError as err:
        logging.error(f"program error while trying to execute program at {path}: {err}")
        return_code = err.args[0]

    return return_code


def screenshot():
    """
    Capture a screenshot of all screens and save it as 'screenshot.jpg'.

    :return: 0 if successful, error code otherwise.
    :rtype: int
    """
    return_value = None
    try:
        ImageGrab.grab(all_screens=True).save('screenshot.jpg')
        # call function to read photo
        base64_bytes = b''
        with open('screenshot.jpg', 'rb') as img:
            base64_bytes = base64.b64encode(img.read()).decode('utf-8')
        return base64_bytes
    except OSError as err:
        logging.error(f"os error while trying to take a screenshot: {err}")
        # Return error code
        return_value = None

    return return_value


def send(comm, data, args=0):
    """
    Send data over a communication channel.

    :param args: number of arguments the server expects in the next request
    :type args: int

    :param comm: The communication channel.
    :type comm: socket.socket

    :param data: The data to be sent.
    :type data: str

    :return: 0 if successful, error code otherwise.
    :rtype: int
    """
    logging.info(f"trying to send{data}")
    return_code = 0
    data_len = len(data)
    # Include type information along with the data length and actual data
    to_send = str(args) + '$' + str(data_len) + '$' + data
    sent = 0
    logging.info("sending data...")
    try:
        while sent < len(to_send):
            sent += comm.send(to_send[sent:].encode())
        logging.info("data sent successfully")

    except socket.error as err:
        logging.error(f"error while trying to send data to client!: {err}")
        # Return error code
        return_code = err.args[0]

    return return_code


def receive(comm):
    """
    Receive data over a communication channel.

    :param comm: The communication channel.
    :type comm: socket.socket

    :return: string of the data from the client if successful, None otherwise.
    :rtype: str or None
    """
    data_len_str = ""
    received_data = ""
    num_of_args = ""
    logging.info("starting receiving data...")
    # Receive num of args
    try:
        while True:
            buff = comm.recv(1).decode()
            if buff == '$':
                break
            if buff == '':
                num_of_args = None
                break
            num_of_args += buff

        if num_of_args is not None:
            num_of_args = int(num_of_args)
            # Receive length of the data
            logging.info("receiving data len...")
            while True:
                buff = comm.recv(1).decode()
                if buff == '$':
                    break
                if buff == '':
                    data_len_str = None
                    break
                data_len_str += buff

            # Convert the length to an integer
            if data_len_str is not None:
                data_len = int(data_len_str)

                # Receive the actual data
                logging.info("receiving the data...")
                i = 0
                while len(received_data) < data_len:
                    buff = comm.recv(data_len - len(received_data)).decode()
                    if buff == '':
                        received_data = None
                        break
                    received_data += buff
                received_data = received_data.split("$")
                if len(received_data) != max(num_of_args, 1):
                    logging.warning("server received a different request than expected!")
                    received_data = None
                logging.info("received successfully")
            else:
                received_data = None
        else:
            received_data = None

    except socket.error as err:
        logging.error(f"error while trying to receive data from client!: {err}")
        # Return None for failure
        received_data = None

    finally:
        print(received_data)
        return received_data


# def assert user response

def handle_general(comm, message, num_of_args, return_data, func):
    return_code = 0
    try:
        if num_of_args != 0 and message is not None:
            logging.debug(f"sending message to client: {message}")
            return_code = send(comm, message, num_of_args)
            if return_code == 0:
                logging.info("receiving response from client...")
                res = receive(comm)
                if res is not None:
                    logging.debug(f"Executing function {func.__name__}() with {num_of_args} args")
                    if len(res) == num_of_args:
                        print(*res[:num_of_args])
                        data = func(*res[:num_of_args])
                        if return_data:  # signify if you want to return the function return value
                            return_code = send(comm, data, num_of_args)
                        else:
                            return_code = data
                    else:
                        return_code = 1

        elif num_of_args == 0 and message is None:
            data = func()
            if return_data:
                return_code = send(comm, data)
            else:
                return_code = data
        else:
            # this function operates on the assumption that,
            # if you need arguments for function, you need to send client a message and vice versa.
            return_code = 1
    except socket.error as err:
        logging.error(f"communication error trying to execute user command: {err}")
        return_code = None
    return return_code


def handle_request(client):
    not_disconnect = True
    try:
        while not_disconnect:
            req = receive(client)
            if req is not None:
                req = ''.join(req).upper()
                logging.debug(f"user input: {req}")
                if req == "DIR":
                    r_code = handle_general(client, "ENTER PATH", 1, True, get_file_list)
                    if (r_code != 0 and send(client, "SOMETHING WENT WRONG!") != 0) or r_code is None:
                        disconnect = True
                elif req == "DELETE":
                    print("what?")
                    r_code = handle_general(client, "ENTER PATH", 1, False, delete_file)
                    if (r_code != 0 and send(client, "SOMETHING WENT WRONG!") != 0) \
                            or (r_code is None or (r_code == 0 and send(client, "FILE DELETED") != 0)):
                        disconnect = True

                elif req == "COPY":
                    r_code = handle_general(client, "ENTER PATHS", 2, False, copy_file)
                    if (r_code != 0 and send(client, "SOMETHING WENT WRONG!") != 0) \
                            or (r_code is None or (r_code == 0 and send(client, "FILE COPY") != 0)):
                        disconnect = True
                # handle copy request
                elif req == "EXECUTE":
                    r_code = handle_general(client, "ENTER PATH", 1, False, execute_program)
                    if (r_code != 0 and send(client, "SOMETHING WENT WRONG!") != 0) \
                            or (r_code is None or (r_code == 0 and send(client, "FILE EXECUTE") != 0)):
                        disconnect = True
                # handle execute request
                elif req == "TAKE SCREENSHOT":
                    r_code = handle_general(client, None, 0, True, screenshot)
                    if r_code != 0 and send(client, "SOMETHING WENT WRONG!") != 0:
                        disconnect = True
                # handle screenshot request
                elif req == "EXIT":
                    # send disconnect message
                    send(client, "GOODBYE")
                    disconnect = True
                else:
                    logging.warning(f"unknown command: {req}")
                    if send(client, "UNKNOWN COMMAND") != 0:
                        disconnect = True
            else:
                logging.error("client hasn't responded!")
                disconnect = True
    except socket.error as err:
        logging.error(f"error in communication with client: {err}")
    except KeyboardInterrupt:
        print('Keyboard interrupt detected, closing server.')
        logging.debug('Keyboard interrupt detected, closing server.')
        # send disconnect message
        send(client, "GOODBYE")

        result = False
    finally:
        logging.info("disconnecting client socket")
        client.close()
        logging.info("terminated connection with client socket")
        return not not_disconnect


def manage_client(serv):
    successful = True
    while successful:
        conn, addr = serv.accept()
        successful = handle_request(conn)


def connect_server(server):
    server.bind((LISTEN_IP, LISTEN_PORT))
    server.listen(Q_LEN)
    logging.debug(f"server is listening on port {LISTEN_PORT}")


def main():
    """
    the main function; responsible for running the server code
    """
    # define an ipv4 tcp socket and listen for an incoming connection
    serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        connect_server(serv)
        manage_client(serv)
    except KeyboardInterrupt:
        print("oh oh")
    except socket.error as err:
        logging.error(f"error while opening server socket: {err}")
    finally:
        serv.close()


if __name__ == "__main__":
    # make sure we have a logging directory and configure the logging
    if not os.path.isdir(LOG_DIR):
        os.makedirs(LOG_DIR)
    logging.basicConfig(format=LOG_FORMAT, filename=LOG_FILE, level=LOG_LEVEL)

    main()
